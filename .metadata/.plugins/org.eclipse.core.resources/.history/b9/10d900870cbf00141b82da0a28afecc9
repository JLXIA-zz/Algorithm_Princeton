import java.util.Comparator;


public class Point implements Comparable<Point> {
   private int x, y;
	
   public final Comparator<Point> SLOPE_ORDER        // compare points by slope to this point
                    =new Comparator<Point>(){

		@Override
		public int compare(Point o1, Point o2) {
			double s1 = Point.this.slopeTo(o1);
			double s2 = Point.this.slopeTo(o2);
			if (Double.compare(s1, s2)==0) return o1.compareTo(o2);
			else return Double.compare(s1, s2);
		}
   };
      
   public Point(int x, int y) {                         // construct the point (x, y)
       this.x = x;
       this.y = y;
   }
    
   public   void draw() {                              // draw this point
       StdDraw.setPenColor(StdDraw.RED);
	   StdDraw.circle(this.x, this.y,10);
   }
   
   public   void drawTo(Point that) {                  // draw the line segment from this point to that point
       StdDraw.setPenColor(StdDraw.BLUE);
	   StdDraw.line(this.x, this.y, that.x, that.y);  
   }
   public String toString() {                           // string representation
       return "("+String.valueOf(this.x)+ ":"+ String.valueOf(this.y)+")";
   }
   
   public    int compareTo(Point that) {    	   // is this point lexicographically smaller than that point?
         if (this.y < that.y || (this.y == that.y && this.x < that.x)) return -1;
         else if ( this.y == that.y && this.x == that.x) return 0;
         else return 1;
   }
   
   public double slopeTo(Point that){                  // the slope between this point and that point
        if (this.x == that.x) {
        	if (this.y == that.y) return Double.NEGATIVE_INFINITY;
        	else return Double.POSITIVE_INFINITY;
        }
        else {
        	if (that.y == this.y) return 0;  
        	else return (double) (that.y - this.y)/ (double) (that.x -  this.x);
        }
   }
    
   public static void main (String [] args){
	   Point p1=new Point(1, 1);
	   Point p2=new Point(2, 3);
	   Point p3=new Point(3, 4);
	   
	   System.out.println(p1.compareTo(p2));
	   
	   System.out.println(p1.SLOPE_ORDER.compare(p2, p3));
   }
   
}

