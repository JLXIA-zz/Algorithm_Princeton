/*
 * @author JL Xia
 * Princeton Algorithm Assignment5
 * 
 */
public class KdTree {
	   
	   private class Node{
		   private Point2D node;
		   private Node parent, left, right;
		   private boolean direction;
		   public Node(Point2D p, Node parent, Node left, Node right){
			   node = p;
			   this.parent = parent;
			   this.left = left;
			   this.right = right;
			   if (parent == null) direction = Xdirection;
			   else direction = ! parent.direction;
		   }
		   
		   public Node getleft(Node node) {
			   return node.left;
		   }
		   
		   public Node getright(Node node) {
			   return node.right;
		   }
		   
		   public Node getparent(Node node) {
			   return node.parent;
		   }
		   
		   public void setleft(Node left) {
			   this.left = left;
		   }
		   
		   public void setright(Node right) {
			   this.right = right;
		   }
		   
		   public void setparent(Node parent) {
			   this.parent = parent;
		   }
		   
		   
	   }
	
	   private int size; 
	   private Node root, left, right;
	   
	   private final boolean Xdirection = true;
	   private final boolean Ydirection = false;
	   
	   // construct an empty Tree of points 
	   public KdTree(Point2D point){
		   root = new Node(point, null, null, null);
		   
		   size = 1;
	   }
	  
	   // is the Tree empty? 
	   public boolean isEmpty() {
		   return size == 0;
	   }
	   // number of points in the Tree
	   public int size() {
		   return size;
	   }
	   // add the point to the Tree (if it is not already in the set)
	   public void insert(Point2D p) {
		   Node current = root;
		   boolean togo = (current.direction) ? p.x() < current.node.x() : p.y() < current.node.y();
		   Node togonode = (togo)? current.left : current.right;
		   while(togonode != null) {
			   current = togonode;
			   togo = (current.direction) ? p.x() < current.node.x() : p.y() < current.node.y();
			   togonode = (togo)? current.left : current.right;
		   }
		   Node toadd = new Node(p, current, null, null);
		   if (togo) current.setleft(toadd);
		   else current.setright(toadd);
	   }
	   
	   // does the Tree contain point p? 
	   public boolean contains(Point2D p) {
		   return true;
	   }
	   // draw all points to standard draw 
	   public void draw() {
		    StdDraw.setXscale(0, 1);   //setup scale for drawing
	        StdDraw.setYscale(0, 1); 
		    Node current = root;
		    drawHelper(current);
	   }
	   
	   
	   private void drawHelper(Node current) {
          if (current == null) return;
          StdDraw.point(current.node.x(), current.node.y());
          drawHelper(current.left);
          drawHelper(current.right);
	   }

	// all points that are inside the rectangle 
	   public Iterable<Point2D> range(RectHV rect) {
		   return null;
	   }
	   // a nearest neighbor in the set to point p; null if the set is empty 
	   public Point2D nearest(Point2D p) {
		   return null;
	   }
	   // unit testing of the methods (optional) 

	   public static void main(String[] args) {
		   Point2D p1 = new Point2D(7, 2);
		   Point2D p2 = new Point2D(5, 4);
		   Point2D p3 = new Point2D(2, 3);
		   Point2D p4 = new Point2D(4, 7);
		   Point2D p5 = new Point2D(9, 6);
		   
		   KdTree pic = new KdTree(p1);
		   pic.insert(p2);
		   pic.insert(p3);
		   pic.insert(p4);
		   pic.insert(p5);

           System.out.println(pic.root.node.toString());
           System.out.println(pic.root.left.node.toString());
           System.out.println(pic.root.left.left.node.toString());
           System.out.println(pic.root.left.right.node.toString());

	   }
	}
